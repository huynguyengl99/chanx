"""
FastAPI WebSocket Chat Demo - Full Implementation

This is the complete implementation showcasing all fast-channels features.
See tutorial/ directory for step-by-step learning files.
"""

# Setup chanx FastAPI integration
from chanx.fast_channels import (
    asyncapi_docs,
    asyncapi_spec_json,
    asyncapi_spec_yaml,
)
from chanx.fast_channels.type_defs import AsyncAPIConfig
from fastapi import APIRouter, FastAPI, Response
from fastapi.requests import Request
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles

# Import consumers from modular apps
from sandbox_fastapi.apps.background_jobs.consumer import (
    BackgroundJobConsumer,  # RQ background jobs
)
from sandbox_fastapi.apps.room_chat.consumer import (
    RoomChatConsumer,  # Dynamic room connections
)
from sandbox_fastapi.apps.showcase.consumer import (  # Multiple channel layer types
    AnalyticsConsumer,
    ChatConsumer,
    NotificationConsumer,
    ReliableChatConsumer,
)
from sandbox_fastapi.apps.system_chat.consumer import (
    SystemMessageConsumer,  # Direct WebSocket (no layers)
)

# Setup channel layers configuration
from sandbox_fastapi.layers import setup_layers

setup_layers()

app = FastAPI()


# Add chanx AsyncAPI documentation manually
asyncapi_conf = AsyncAPIConfig(
    description="Websocket API documentation generated by Chanx",
    version="1.0.0",
)


@app.get("/asyncapi", tags=["Documentation"])
async def asyncapi_documentation(request: Request) -> HTMLResponse:
    """Interactive AsyncAPI documentation for WebSocket APIs"""
    return await asyncapi_docs(request=request, app=app, config=asyncapi_conf)


@app.get("/asyncapi.json", tags=["Documentation"])
async def asyncapi_json_spec(request: Request) -> JSONResponse:
    """AsyncAPI specification in JSON format"""
    return await asyncapi_spec_json(request=request, app=app, config=asyncapi_conf)


@app.get("/asyncapi.yaml", tags=["Documentation"])
async def asyncapi_yaml_spec(request: Request) -> Response:
    """AsyncAPI specification in YAML format"""
    return await asyncapi_spec_yaml(request=request, app=app, config=asyncapi_conf)


# Mount static files
app.mount("/static", StaticFiles(directory="sandbox_fastapi/static"), name="static")

# ----------------- HTML Client -----------------
html = """
<!DOCTYPE html>
<html>
    <head>
        <title>WebSocket Chat Demo</title>
        <link rel="stylesheet" href="/static/css/style.css">
    </head>
    <body>
        <h1>WebSocket Chat Demo</h1>
        <button class="analytics-btn" onclick="sendAnalyticsEvent()">Send Analytics Event</button>

        <div class="chat-container">
            <!-- System Messages Chat Box -->
            <div class="chat-box system-chat">
                <h3>System Messages (No Layer)</h3>
                <form class="input-form" onsubmit="sendSystemMessage(event)">
                    <input type="text" id="systemMessageText" placeholder="Type system message..." autocomplete="off"/>
                    <button type="submit">Send</button>
                </form>
                <ul id='systemMessages' class='messages'></ul>
            </div>

            <!-- Room Chat Box -->
            <div class="chat-box room-chat">
                <h3>Room Chat</h3>
                <div class="room-controls">
                    <input type="text" id="roomName" placeholder="Enter room name..." autocomplete="off"/>
                    <button onclick="connectToRoom()" id="connectBtn">Connect</button>
                    <button onclick="disconnectFromRoom()" id="disconnectBtn" style="display:none;">Disconnect</button>
                </div>
                <div id="currentRoom" style="margin: 10px 0; font-weight: bold;"></div>
                <form class="input-form" onsubmit="sendRoomMessage(event)">
                    <input type="text" id="roomMessageText" placeholder="Type room message..." autocomplete="off" disabled/>
                    <button type="submit" disabled>Send</button>
                </form>
                <ul id='roomMessages' class='messages'></ul>
            </div>

            <!-- Background Job Processing Chat Box -->
            <div class="chat-box job-chat">
                <h3>Background Job Processing</h3>
                <div class="job-controls">
                    <select id="jobType">
                        <option value="default">Default Processing</option>
                        <option value="translate">Translation</option>
                        <option value="analyze">Text Analysis</option>
                        <option value="generate">AI Generation</option>
                    </select>
                </div>
                <form class="input-form" onsubmit="sendJobMessage(event)">
                    <input type="text" id="jobMessageText" placeholder="Type message for processing..." autocomplete="off"/>
                    <button type="submit">Process</button>
                </form>
                <ul id='jobMessages' class='messages'></ul>
            </div>

            <!-- All Layers Combination Chat Box -->
            <div class="chat-box regular-chat">
                <h3>Showcase</h3>
                <form class="input-form" onsubmit="sendMessage(event)">
                    <input type="text" id="messageText" placeholder="Type message..." autocomplete="off"/>
                    <button type="submit">Send</button>
                </form>
                <ul id='messages' class='messages'></ul>
            </div>
        </div>
        <!-- Load single JavaScript file with all functionality -->
        <script src="/static/js/main.js"></script>
    </body>
</html>
"""

home_router = APIRouter(tags=["home"])


@home_router.get("/")
async def home() -> HTMLResponse:
    return HTMLResponse(html)


app.include_router(home_router)

# ----------------- WebSocket Sub-App -----------------
ws_router = FastAPI()

# WebSocket routes for different consumer types
ws_router.add_websocket_route("/chat", ChatConsumer.as_asgi())
ws_router.add_websocket_route(
    "/reliable", ReliableChatConsumer.as_asgi()
)  # Queue-based reliable messaging
ws_router.add_websocket_route(
    "/notifications", NotificationConsumer.as_asgi()
)  # Real-time notifications
ws_router.add_websocket_route(
    "/analytics", AnalyticsConsumer.as_asgi()
)  # Analytics events
ws_router.add_websocket_route(
    "/system", SystemMessageConsumer.as_asgi()
)  # Direct WebSocket (no layers)
ws_router.add_websocket_route(
    "/background_jobs", BackgroundJobConsumer.as_asgi()
)  # RQ background job processing
ws_router.add_websocket_route(
    "/room/{room_name}", RoomChatConsumer.as_asgi()
)  # Dynamic room connections (now using chanx!)

app.mount("/ws", ws_router)
